package database

import (
	"context"
	"fmt"
	"log"
	"time"

	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

var mongoPool = make(map[string]*mongo.Client)

// ConnectMongoFromEnv k·∫øt n·ªëi t·∫•t c·∫£ MongoDB t·ª´ ENV (ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t cho c·∫•u tr√∫c m·ªõi)
func ConnectMongoFromEnv() {
	connections := GetConnections()

	log.Println("üîç T√¨m th·∫•y MongoDB connections...")

	for connectionName, config := range connections {
		if config.Driver != "mongodb" {
			continue
		}

		log.Printf("üîó K·∫øt n·ªëi MongoDB [%s]...", connectionName)

		uri := buildMongoDSN(config)
		if uri == "" {
			log.Printf("‚ö†Ô∏è B·ªè qua MongoDB %s: kh√¥ng c√≥ URI", connectionName)
			continue
		}

		client, err := connectMongo(connectionName, uri, config.MaxOpenConns, config.MaxIdleConns, config.ConnMaxLifetime)
		if err != nil {
			log.Printf("‚ùå L·ªói k·∫øt n·ªëi MongoDB %s: %v", connectionName, err)
			continue
		}

		mongoPool[connectionName] = client
		log.Printf("‚úÖ K·∫øt n·ªëi MongoDB [%s] th√†nh c√¥ng", connectionName)
	}

	if len(mongoPool) == 0 {
		log.Println("‚ö†Ô∏è Kh√¥ng c√≥ MongoDB n√†o ƒë∆∞·ª£c k·∫øt n·ªëi th√†nh c√¥ng")
	} else {
		log.Printf("üìä T·ªïng c·ªông %d MongoDB ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi", len(mongoPool))
	}
}

// connectMongo k·∫øt n·ªëi MongoDB v·ªõi connection config
func connectMongo(connectionName, uri string, maxOpenConns, maxIdleConns int, maxConnLifetime time.Duration) (*mongo.Client, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	clientOptions := options.Client().ApplyURI(uri).
		SetMaxPoolSize(uint64(maxOpenConns)).
		SetMinPoolSize(uint64(maxIdleConns)).
		SetMaxConnIdleTime(maxConnLifetime)

	client, err := mongo.Connect(ctx, clientOptions)
	if err != nil {
		return nil, fmt.Errorf("kh√¥ng th·ªÉ k·∫øt n·ªëi MongoDB: %v", err)
	}

	// Ping test
	if err := client.Ping(ctx, nil); err != nil {
		return nil, fmt.Errorf("ping MongoDB error: %v", err)
	}

	return client, nil
}

// GetMongo tr·∫£ v·ªÅ *mongo.Client theo t√™n connection
func GetMongo(connectionName string) *mongo.Client {
	client, ok := mongoPool[connectionName]
	if !ok {
		log.Fatalf("‚ùå MongoDB connection [%s] ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh", connectionName)
	}
	return client
}

// GetMongoSafe tr·∫£ v·ªÅ *mongo.Client theo t√™n connection, kh√¥ng panic n·∫øu kh√¥ng t√¨m th·∫•y
func GetMongoSafe(connectionName string) (*mongo.Client, bool) {
	client, ok := mongoPool[connectionName]
	return client, ok
}

// GetMongoDB tr·∫£ v·ªÅ *mongo.Database theo t√™n connection v√† database
func GetMongoDB(connectionName, databaseName string) *mongo.Database {
	client := GetMongo(connectionName)
	return client.Database(databaseName)
}

// ListMongoClients tr·∫£ v·ªÅ danh s√°ch t√™n c√°c MongoDB connections ƒë√£ k·∫øt n·ªëi
func ListMongoClients() []string {
	names := make([]string, 0, len(mongoPool))
	for name := range mongoPool {
		names = append(names, name)
	}
	return names
}

// CloseMongoClients ƒë√≥ng t·∫•t c·∫£ k·∫øt n·ªëi MongoDB
func CloseMongoClients() {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	for connectionName, client := range mongoPool {
		if err := client.Disconnect(ctx); err != nil {
			log.Printf("‚ùå L·ªói ƒë√≥ng MongoDB connection [%s]: %v", connectionName, err)
		} else {
			log.Printf("‚úÖ ƒê√£ ƒë√≥ng MongoDB connection [%s]", connectionName)
		}
	}

	// Clear pool
	mongoPool = make(map[string]*mongo.Client)
}

// IsMongoConnected ki·ªÉm tra xem m·ªôt MongoDB connection ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi ch∆∞a
func IsMongoConnected(connectionName string) bool {
	_, ok := mongoPool[connectionName]
	return ok
}

// GetMongoConnectionInfo tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa m·ªôt MongoDB connection
func GetMongoConnectionInfo(connectionName string) map[string]interface{} {
	_, exists := GetMongoSafe(connectionName)
	if !exists {
		return nil
	}

	config, exists := GetConnectionConfig(connectionName)
	if !exists {
		return nil
	}

	info := map[string]interface{}{
		"driver":            config.Driver,
		"database":          config.Database,
		"uri":               maskSensitiveInfo(config.URL),
		"connected":         true,
		"max_open_conns":    config.MaxOpenConns,
		"max_idle_conns":    config.MaxIdleConns,
		"conn_max_lifetime": config.ConnMaxLifetime.String(),
	}

	return info
}

// GetAllMongoConnectionsInfo tr·∫£ v·ªÅ th√¥ng tin t·∫•t c·∫£ MongoDB connections
func GetAllMongoConnectionsInfo() map[string]map[string]interface{} {
	info := make(map[string]map[string]interface{})

	for connectionName := range mongoPool {
		info[connectionName] = GetMongoConnectionInfo(connectionName)
	}

	return info
}

// CloseMongoConnection ƒë√≥ng m·ªôt MongoDB connection c·ª• th·ªÉ
func CloseMongoConnection(connectionName string) error {
	client, ok := mongoPool[connectionName]
	if !ok {
		return fmt.Errorf("MongoDB connection [%s] kh√¥ng t·ªìn t·∫°i", connectionName)
	}

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := client.Disconnect(ctx); err != nil {
		return fmt.Errorf("l·ªói ƒë√≥ng MongoDB connection [%s]: %v", connectionName, err)
	}

	delete(mongoPool, connectionName)
	log.Printf("üîå ƒê√£ ƒë√≥ng MongoDB connection [%s]", connectionName)
	return nil
}
