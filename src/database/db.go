package database

import (
	"log"
	"os"
	"strings"

	"github.com/joho/godotenv"
)

// Init kh·ªüi t·∫°o t·∫•t c·∫£ database connections
func Init() {
	// Load .env file
	if err := godotenv.Load(); err != nil {
		log.Println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .env, d√πng ENV h·ªá th·ªëng")
	} else {
		log.Println("‚úÖ ƒê√£ load file .env th√†nh c√¥ng")
	}

	// Log th√¥ng tin debug v·ªÅ c√°c bi·∫øn m√¥i tr∆∞·ªùng database
	logDBEnvVars()

	// K·∫øt n·ªëi t·∫•t c·∫£ database connections
	ConnectAllFromEnv()

	// K·∫øt n·ªëi MongoDB databases (n·∫øu c√≥)
	// ConnectMongoFromEnv()
}

// logDBEnvVars log c√°c bi·∫øn m√¥i tr∆∞·ªùng database ƒë·ªÉ debug
func logDBEnvVars() {
	log.Println("üîç Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng database:")

	// T√¨m t·∫•t c·∫£ bi·∫øn m√¥i tr∆∞·ªùng li√™n quan ƒë·∫øn database
	dbVars := make(map[string]string)
	for _, env := range os.Environ() {
		parts := strings.SplitN(env, "=", 2)
		key := parts[0]
		value := parts[1]

		// Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng database
		if isDatabaseEnvVar(key) {
			// ·∫®n gi√° tr·ªã nh·∫°y c·∫£m
			if strings.Contains(key, "PASSWORD") || strings.Contains(key, "URI") || strings.Contains(key, "URL") {
				if len(value) > 10 {
					value = value[:10] + "..."
				}
			}
			dbVars[key] = value
		}
	}

	if len(dbVars) == 0 {
		log.Println("   Kh√¥ng t√¨m th·∫•y bi·∫øn m√¥i tr∆∞·ªùng database n√†o")
	} else {
		log.Println("   C√°c bi·∫øn m√¥i tr∆∞·ªùng database ƒë∆∞·ª£c t√¨m th·∫•y:")
		for key, value := range dbVars {
			log.Printf("   %s = %s", key, value)
		}
	}
}

// isDatabaseEnvVar ki·ªÉm tra xem bi·∫øn m√¥i tr∆∞·ªùng c√≥ li√™n quan ƒë·∫øn database kh√¥ng
func isDatabaseEnvVar(key string) bool {
	databasePrefixes := []string{
		"DB_", "DATABASE_", "APP_DB_", "DATA_DB_", "LOGS_DB_",
		"MONGODB_", "MYSQL_", "POSTGRES_", "SQLITE_", "SQLSRV_",
	}

	for _, prefix := range databasePrefixes {
		if strings.HasPrefix(key, prefix) {
			return true
		}
	}

	return false
}

// ConnectMongoFromEnv k·∫øt n·ªëi MongoDB databases t·ª´ ENV
// H√†m n√†y ƒë∆∞·ª£c implement trong mongo.go

// maskSensitiveInfo ·∫©n th√¥ng tin nh·∫°y c·∫£m trong log
func maskSensitiveInfo(value string) string {
	if value == "" {
		return ""
	}

	if len(value) > 20 {
		return value[:10] + "..." + value[len(value)-10:]
	}

	return value
}

// GetDefaultConnection tr·∫£ v·ªÅ connection m·∫∑c ƒë·ªãnh
func GetDefaultConnection() string {
	// ∆Øu ti√™n theo th·ª© t·ª±: mysql, pgsql, sqlite
	connections := ListConnections()

	priority := []string{"mysql", "pgsql", "sqlite"}
	for _, conn := range priority {
		for _, connected := range connections {
			if connected == conn {
				return conn
			}
		}
	}

	// N·∫øu kh√¥ng c√≥ connection ∆∞u ti√™n, tr·∫£ v·ªÅ connection ƒë·∫ßu ti√™n
	if len(connections) > 0 {
		return connections[0]
	}

	return ""
}

// GetConnectionInfo tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt c·ªßa m·ªôt connection
func GetConnectionInfo(connectionName string) map[string]interface{} {
	config, exists := GetConnectionConfig(connectionName)
	if !exists {
		return nil
	}

	info := map[string]interface{}{
		"driver":    config.Driver,
		"host":      config.Host,
		"port":      config.Port,
		"database":  config.Database,
		"username":  config.Username,
		"charset":   config.Charset,
		"prefix":    config.Prefix,
		"strict":    config.Strict,
		"connected": IsConnected(connectionName),
	}

	// Th√™m th√¥ng tin pool n·∫øu ƒë√£ k·∫øt n·ªëi
	if IsConnected(connectionName) {
		info["max_open_conns"] = config.MaxOpenConns
		info["max_idle_conns"] = config.MaxIdleConns
		info["conn_max_lifetime"] = config.ConnMaxLifetime.String()
	}

	return info
}

// GetAllConnectionsInfo tr·∫£ v·ªÅ th√¥ng tin t·∫•t c·∫£ connections
func GetAllConnectionsInfo() map[string]map[string]interface{} {
	connections := GetConnections()
	info := make(map[string]map[string]interface{})

	for connectionName := range connections {
		info[connectionName] = GetConnectionInfo(connectionName)
	}

	return info
}
