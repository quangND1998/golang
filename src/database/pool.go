package database

import (
	"fmt"

	"github.com/gofiber/fiber/v2/log"
	"gorm.io/driver/mysql"
	"gorm.io/driver/postgres"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

var pool = make(map[string]*gorm.DB)

// ConnectAllFromEnv load t·∫•t c·∫£ connections t·ª´ ENV v√† k·∫øt n·ªëi
func ConnectAllFromEnv() {
	connections := GetConnections()

	log.Info("üîç T√¨m th·∫•y %d database connections", len(connections))

	for connectionName, config := range connections {
		log.Info("üîó K·∫øt n·ªëi database [%s] (%s)...", connectionName, config.Driver)

		// Validate c·∫•u h√¨nh tr∆∞·ªõc khi k·∫øt n·ªëi
		if err := validateDBConfig(connectionName, config); err != nil {
			log.Info("‚ö†Ô∏è B·ªè qua connection %s: %v", connectionName, err)
			continue
		}

		// X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho MongoDB
		if config.Driver == "mongodb" {
			log.Info("‚ö†Ô∏è MongoDB [%s] ch∆∞a ƒë∆∞·ª£c implement trong GORM, b·ªè qua", connectionName)
			continue
		}

		db, err := connectDB(connectionName, config)
		if err != nil {
			log.Info("‚ùå L·ªói k·∫øt n·ªëi database %s: %v", connectionName, err)
			continue
		}

		pool[connectionName] = db
		log.Info("‚úÖ K·∫øt n·ªëi database [%s] (%s) th√†nh c√¥ng", connectionName, config.Driver)
	}

	if len(pool) == 0 {
		log.Info("‚ö†Ô∏è Kh√¥ng c√≥ database n√†o ƒë∆∞·ª£c k·∫øt n·ªëi th√†nh c√¥ng")
	} else {
		log.Info("üìä T·ªïng c·ªông %d database ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi", len(pool))
	}
}

// connectDB m·ªü k·∫øt n·ªëi v·ªõi connection config
func connectDB(connectionName string, config ConnectionConfig) (*gorm.DB, error) {
	dsn := buildDSN(config)
	if dsn == "" {
		return nil, fmt.Errorf("kh√¥ng th·ªÉ x√¢y d·ª±ng DSN cho connection: %s", connectionName)
	}
	fmt.Println("Connecting to database with DSN:", dsn)
	var dialector gorm.Dialector
	switch config.Driver {
	case "mysql":
		dialector = mysql.Open(dsn)
	case "postgres":
		dialector = postgres.Open(dsn)
	case "sqlite":
		dialector = sqlite.Open(dsn)
	default:
		return nil, fmt.Errorf("unsupported driver: %s", config.Driver)
	}

	db, err := gorm.Open(dialector, &gorm.Config{})
	if err != nil {
		return nil, fmt.Errorf("kh√¥ng th·ªÉ m·ªü k·∫øt n·ªëi database: %v", err)
	}

	sqlDB, err := db.DB()
	if err != nil {
		return nil, fmt.Errorf("kh√¥ng th·ªÉ l·∫•y underlying DB: %v", err)
	}

	// C·∫•u h√¨nh connection pool
	sqlDB.SetMaxOpenConns(config.MaxOpenConns)
	sqlDB.SetMaxIdleConns(config.MaxIdleConns)
	sqlDB.SetConnMaxLifetime(config.ConnMaxLifetime)

	// Ping test
	if err := sqlDB.Ping(); err != nil {
		return nil, fmt.Errorf("ping database error: %v", err)
	}

	return db, nil
}

// Get tr·∫£ v·ªÅ *gorm.DB theo t√™n connection
func Get(connectionName string) *gorm.DB {
	db, ok := pool[connectionName]
	if !ok {
		log.Fatalf("‚ùå Database connection [%s] ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh", connectionName)
	}
	return db
}

// GetSafe tr·∫£ v·ªÅ *gorm.DB theo t√™n connection, kh√¥ng panic n·∫øu kh√¥ng t√¨m th·∫•y
func GetSafe(connectionName string) (*gorm.DB, bool) {
	db, ok := pool[connectionName]
	return db, ok
}

// ListConnections tr·∫£ v·ªÅ danh s√°ch t√™n c√°c connection ƒë√£ k·∫øt n·ªëi
func ListConnections() []string {
	names := make([]string, 0, len(pool))
	for name := range pool {
		names = append(names, name)
	}
	return names
}

// GetConnectionConfig tr·∫£ v·ªÅ c·∫•u h√¨nh c·ªßa m·ªôt connection
func GetConnectionConfig(connectionName string) (ConnectionConfig, bool) {
	connections := GetConnections()
	config, ok := connections[connectionName]
	return config, ok
}

// GetAllConnectionConfigs tr·∫£ v·ªÅ t·∫•t c·∫£ c·∫•u h√¨nh connections
func GetAllConnectionConfigs() map[string]ConnectionConfig {
	return GetConnections()
}

// IsConnected ki·ªÉm tra xem m·ªôt connection ƒë√£ ƒë∆∞·ª£c k·∫øt n·ªëi ch∆∞a
func IsConnected(connectionName string) bool {
	_, ok := pool[connectionName]
	return ok
}

// CloseConnection ƒë√≥ng m·ªôt connection c·ª• th·ªÉ
func CloseConnection(connectionName string) error {
	db, ok := pool[connectionName]
	if !ok {
		return fmt.Errorf("connection [%s] kh√¥ng t·ªìn t·∫°i", connectionName)
	}

	sqlDB, err := db.DB()
	if err != nil {
		return fmt.Errorf("kh√¥ng th·ªÉ l·∫•y underlying DB: %v", err)
	}

	if err := sqlDB.Close(); err != nil {
		return fmt.Errorf("l·ªói ƒë√≥ng connection [%s]: %v", connectionName, err)
	}

	delete(pool, connectionName)
	log.Info("üîå ƒê√£ ƒë√≥ng connection [%s]", connectionName)
	return nil
}

// CloseAllConnections ƒë√≥ng t·∫•t c·∫£ connections
func CloseAllConnections() {
	for connectionName := range pool {
		CloseConnection(connectionName)
	}
	log.Info("üîå ƒê√£ ƒë√≥ng t·∫•t c·∫£ database connections")
}
